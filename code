// **** ATtiny Tea Maker v1.0 **** //
// Developed by Suvin KS
// Based on http://letsmakerobots.com/blog/jerz/attiny-servo-control
// Initial   : Aug 20, 2014
// Modified  : Sep 10, 2014

const byte servo  =    0;         // Servo pin on ATtiny
const byte buzzer =    1;         // Buzzer pin on ATtiny

int tPulse        =  500;         // Total pulse length on 8 Mhz clock 
int hPulse        =   60;         // High pulse time (60=0deg -> 280=180deg)
bool Dir          =    1;         // Servo direction

int myMax = 210;                  // Servo Arm maximum position (pulled up)
int myMin = 175;                  // Servo Arm minimum position (pulled down)

void setup() {             
  
  pinMode(servo, OUTPUT);   // Setting PB0 as output
  pinMode(buzzer, OUTPUT);  // Setting PB1 as Output
  
  //Initial Delay
  //Pull up and wait for 15 seconds to get the teabag  tied to the Hand. 
  pullup();
  //The clock pulse would have something to do with the delay function i believe. The 2 sec I gave is aorund 10 sec when it works
  delay(2000);
  
  //Start the dipping procedure (90 = 2.5 min approx)
  for (int i = 1; i<= 90; i++)
  {
     dipper();
  }
  
  //Brewing Over
  pullup();  
  buzz();
}


void buzz()
{
  // Five Beeps
  for (int i = 1; i <= 5; i ++)
    {
      digitalWrite(buzzer,HIGH);    // Buzzer Off as per the circuit
      delay(100);
      digitalWrite(buzzer,LOW);     // Buzzer On as per the circuit
      delay(200);
    }
}


void loop()
{
  // Put it there so that the sketch would compile.
}

void pullup()
{
  for(int i = 0;i <= 24;i++)
  {
    digitalWrite(servo, HIGH);                // Set pin high to start pulse
    delayMicroseconds(hPulse);                // High pulse angle data   
    digitalWrite(servo,LOW);                  // Set low for the rest of pulse
    delayMicroseconds(tPulse-hPulse);
    
    if (hPulse < myMax && Dir == 1) hPulse+=10; // Rotate servo to 180 degrees
    else if (hPulse >= myMax && Dir == 1){      // Servo hit upper limit
      hPulse = myMax;                           // Keep servo angle in bounds
 //     Dir=!Dir;                               // Switch direction
    }
    delay(2); // Give servo some time to move before giving it a new position
  }
}

void dipper() {
  for(int i = 0;i <= 24;i++)
  {
    digitalWrite(servo, HIGH);                // Set pin high to start pulse
    delayMicroseconds(hPulse);                // High pulse angle data   
    digitalWrite(servo,LOW);                  // Set low for the rest of pulse
    delayMicroseconds(tPulse-hPulse);
    
    if (hPulse < myMax && Dir == 1) hPulse+=3; // Rotate servo to 180 degrees
    else if (hPulse >= myMax && Dir == 1){      // Servo hit upper limit
      hPulse = myMax;                           // Keep servo angle in bounds
      Dir=!Dir;                               // Switch direction
    }
    if (hPulse > myMin && Dir == 0) hPulse-=3;  // Rotate servo to 0 degrees
    else if (hPulse <= myMin && Dir == 0){       // Servo hit lower limit
      hPulse = myMin;                            // Keep servo angle in bounds
      Dir=!Dir;            // switch direction
      delay(100);
    }
    delay(2); // Give servo some time to move before giving it a new position
  }
}
